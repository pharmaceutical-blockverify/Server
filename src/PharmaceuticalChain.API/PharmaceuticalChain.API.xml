<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PharmaceuticalChain.API</name>
    </assembly>
    <members>
        <member name="M:PharmaceuticalChain.API.Controllers.MedicineBatchesController.DeleteTenantAsync(System.Guid)">
            <summary>
            Delete a medicine batch from the blockchain and database.
            </summary>
            <param name="id">Id of the batch you want to delete.</param>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.MedicinesController.GetMedicinesAsync(System.Nullable{System.Boolean})">
            <summary>
            Return all medicines in the network/database.
            Might or might not include data of the tenant which submitted the medicine basing on the query parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.MedicinesController.GetMedicine(System.Guid)">
            <summary>
            Query a medicine information with its Id.
            </summary>
            <returns>Return information about a medicine on the network.</returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.SupplyChainsController.GetSupplyChain(System.Guid,System.Nullable{System.Boolean})">
            <summary>
            Get supply chain for a medicine batch.
            This API supports 2 types of data format right now:
                - The simple (Recommended): In theory, provide nodes (Tenants) and edges (Transfers) of the supply chain. Using these information, a client can then draw a supply chain.
                - The detailed: (Still in progress) Split the supply chain into separated chains from manufacturer to the last tenant.
            </summary>
            <param name="batchId"></param>
            <param name="isDetailed">
                Specify `false` or don't pass this query to use the simple query. (RECOMMENDED)
                Specify `true` to use a detailed query.
            </param>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.SupplyChainsController.GetSupplyChainAtExactRetailer(System.Guid,System.Guid)">
            <summary>
            Use for end-users who buy pharmaceutical products to query products they have bought from an exact retailer.
            </summary>
            <param name="retailerId"></param>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.TenantsController.CreateTenantAsync(PharmaceuticalChain.API.Controllers.Models.Commands.CreateTenantCommand)">
            <summary>
            Send a transaction to create a new tenant on the Ethereum network.
            </summary>
            <param name="command">
                Command with options to create new tenant.
                Phone number is optional.
            </param>
            <returns></returns>
            <remarks>
                The API creates a transaction to create a new tenant on the network and returns right away.
                It does not wait for the transaction to be mined to the network.
                There will be background jobs to check the status of this transaction.
                Consider using query APIs to get the status of the tenant or the transaction.
            </remarks>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.TenantsController.DeleteTenantAsync(System.Guid)">
            <summary>
            Delete a tenant from the blockchain and database.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.TenantsController.UpdateTenantAsync(System.Guid,PharmaceuticalChain.API.Controllers.Models.Commands.CreateTenantCommand)">
            <summary>
            Update a tenant that has already existed on the blockchain and the database.
            </summary>
            <param name="id">Id of the tenant.</param>
            <param name="command">Information</param>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.TenantsController.GetTenants">
            <summary>
            Query and return information of all tenants on the network/database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.TenantsController.GetTenant(System.Guid)">
            <summary>
            Query a tenant information with its Id.
            </summary>
            <returns>Return information about a tenant.</returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.TenantsController.GetContractAddress(System.Guid)">
            <summary>
            Get contract address on the blockchain network that preresents a tenant object.
            </summary>
            <param name="tenantId">Id of the tenant</param>
            <returns>Contract address for the tenant on the blockchain.</returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.UploadsController.Get(System.String)">
            <summary>
            Use this API to get the URI of the file on Azure Blob Storage system or the file in download dialogue.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Controllers.VerificationsController.GetVerificatorLink(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Aimed for pharmacy retailer usages.
            This API accepts retailerId and batchIds (of which a customer buys) and returns a QR code (in base64 format) decoding to a Verificator link.
            Customer can use that Verificator link to verify drugs.
            </summary>
            <param name="retailerId"></param>
            <param name="batchIds"></param>
            <returns>Return a QR code in base64 format. The QR code contains a link to Verificator with retailerId and batchIds provided.</returns>
        </member>
        <member name="P:PharmaceuticalChain.API.EthereumSettings.Abi">
            <summary>
            Abi of the master contract.
            </summary>
        </member>
        <member name="P:PharmaceuticalChain.API.EthereumSettings.ContractAddress">
            <summary>
            Address of the master contract on Ethereum blockchain.
            </summary>
        </member>
        <member name="P:PharmaceuticalChain.API.Models.Database.BlockchainObject.TransactionHash">
            <summary>
            Transaction hash of the master transaction used to initialize internal contract to create this tenant.
            </summary>
        </member>
        <member name="P:PharmaceuticalChain.API.Models.Database.BlockchainObject.ContractAddress">
            <summary>
            Address of the Tenant contract object on the blockchain network.
            </summary>
        </member>
        <member name="P:PharmaceuticalChain.API.Models.Database.MedicineBatchTransfer.IsConfirmed">
            <summary>
            The sender creates the transfer, but it's not guaranteed on the other end. Did the recipient of the transfer confirm? 
            </summary>
        </member>
        <member name="P:PharmaceuticalChain.API.Models.Database.MedicineBatchTransfer.Tier">
            <summary>
            Tier of the transfer in the supply chain, zero-based.
            Tier of a transfer is determined by the tier of the sending tenant.
            The focal tenant is the manufacturer of a batch. Tier (tier customer) is count from there.
            </summary>
            <example>
                - Tier 0 means the transfer is made from the manufacturer.
                - If 2nd-tier tenant sends a transfer to 4th-tier tenant, tier of the transfer is 2.
            </example>
        </member>
        <member name="P:PharmaceuticalChain.API.Models.Database.Resource.Uri">
            <summary>
            URI to get this resource (from a remote storate, e.g., Azure Blob Storage).
            </summary>
        </member>
        <member name="P:PharmaceuticalChain.API.Models.Database.Tenant.ManufacturedBatches">
            <summary>
            Batches of medicines that are manufactured by this tenant.
            </summary>
        </member>
        <member name="P:PharmaceuticalChain.API.Models.Database.Tenant.SendTransfers">
            <summary>
            Transfers which are made by this tenant.
            </summary>
        </member>
        <member name="P:PharmaceuticalChain.API.Models.Database.Tenant.ReceiveTransfers">
            <summary>
            Transfers that are sent to this tenant.
            </summary>
        </member>
        <member name="P:PharmaceuticalChain.API.Models.Database.Tenant.TransactionHash">
            <summary>
            Transaction hash of the master transaction used to initialize internal contract to create this tenant.
            </summary>
        </member>
        <member name="P:PharmaceuticalChain.API.Models.Database.Tenant.ContractAddress">
            <summary>
            Address of the Tenant contract object on the blockchain network.
            </summary>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Implementations.EthereumService.PharmaceuticalChain#API#Services#Interfaces#IEthereumService#GetTransactionReceipt(System.String)">
            <summary>
            
            </summary>
            <param name="transactionHash"></param>
            <see cref="!:https://docs.nethereum.com/en/latest/introduction/web3/"/>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Implementations.UploadService.PharmaceuticalChain#API#Services#Interfaces#IUploadService#UploadFileToAzureBlob(Microsoft.AspNetCore.Http.IFormFile,PharmaceuticalChain.API.Models.Database.ResourceTypes)">
            <summary>
            Upload given file to Azure Blob Storage and return its unique name on Blob and the URI where the resource lives.
            </summary>
            <param name="file"></param>
            <param name="resourceType"></param>
            <returns>
                First return value is the unique file name of the file on Azure Blob Storage.
                Second return value is the URI of the resource on Azure Blob Storage.
            </returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Interfaces.IDrugTransactionService.Create(System.UInt32,System.UInt32,System.String,System.String,System.UInt32,System.DateTime,System.DateTime,System.Guid)">
            <summary>
            Create a transaction indicating that a company has sent some pills to another company.
            Although counted individually, pills should be sent in packages so <paramref name="packageId"/> is also required.
            </summary>
            <param name="fromCompany">Id of the orginial company.</param>
            <param name="toCompany">Id of the receiver company</param>
            <param name="pillName">Name of the drug.</param>
            <param name="packageId">Package Id which the drugs belong to.</param>
            <param name="value">Number of pills are being transfered with this transaction.</param>
            <param name="receiptId">A drug transaction belongs to a receipt.</param>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Interfaces.IDrugTransactionService.CreateAndReturnReceipt(System.Int32,System.Int32)">
            <summary>
            Create and return Id of the receipt. Use this Id to attach to drug transactions that belong to this receipt.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Interfaces.IEthereumService.GetObjectContractAddress(System.Guid)">
            <summary>
            Get address of object contracts on the blockchain network.
            </summary>
            <param name="id">
                Each object contract contains an id.
                This id is created by the backend in the creation process (before it is used to in creation transaction on blockchain.)
            </param>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Interfaces.IMedicineBatchService.Update(System.Guid,System.String,System.Guid,System.DateTime,System.DateTime,System.UInt32,System.String,System.String)">
            <summary>
            Update every fields but not ManufacturerId.
            Normally, if a manufacturer creates an unwanted batch, it may delete or change the information accordingly, but not "change ownership" to another manufacturer.
            </summary>
            <param name="id"></param>
            <param name="batchNumber"></param>
            <param name="medicineId"></param>
            <param name="manufactureDate"></param>
            <param name="expiryDate"></param>
            <param name="quantity"></param>
            <param name="unit"></param>
            <param name="certificates"></param>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Interfaces.ITenantService.Create(System.String,System.String,System.String,System.String,System.String,System.String,System.String,PharmaceuticalChain.API.Models.Database.TenantTypes)">
            <summary>
            Create a new company in the database and Ethereum network.
            </summary>
            <returns>Return the Id of the newly created company</returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Interfaces.ITenantService.Remove(System.Guid)">
            <summary>
            Remove a tenant in the blockchain.
            </summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Interfaces.ITenantService.GetContractAddress(System.Guid)">
            <summary>
            Get contract address of a tenant on blockchain network.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Interfaces.IVerificationService.CreateVerificatorLink(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Aimed to be called by third-party retailer clients. 
            Before printing an invoice, they ask our server to create a specific URL for that invoice.
            The URL can be printed or informed to the drug buyers to let them scan/review the drugs they purchased.
            </summary>
            <param name="retailerId"></param>
            <param name="batchIds"></param>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Interfaces.IVerificationService.CreateShortenedLink(System.String)">
            <summary>
            Verificator links are usually long. Use a shortner to make it shorter. Save data to embed to QR codes.
            </summary>
            <param name="longUrl"></param>
            <returns></returns>
        </member>
        <member name="M:PharmaceuticalChain.API.Services.Interfaces.IVerificationService.CreateQRCode(System.String)">
            <summary>
            Take a short link and embed it into a QR code.
            This QR code will be used to print on bills for end-users to verify their drugs with Verificator.
            </summary>
            <returns>Return a QR code with an URL. That URL navigates to a specific Verificator website for a drug purchasing bill.</returns>
        </member>
    </members>
</doc>
